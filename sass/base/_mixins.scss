@mixin clearfix {

    &:before,
    &:after {
        content: '';
        display: table;
    }

    &:after {
        clear: both;
    }
}

// Vertical center mixin places an element vertically in the middle of it's parent.
// Requires CSS3, offset manually for older browsers if required.
@mixin vertical_center {

    position: relative;
    top: 50%;

    transform: translateY(-50%);
}

// Image wrap mixin sets the height of a fluid width image before it even loads.
// Requires a container element.
// Defaults to 9 /
@mixin image_wrap($aspect_ratio: 56.25%) {

    position: relative;

    display: block;
    padding-top: 100%;
    overflow: hidden;

    padding-top: $aspect_ratio;

    img
    {
        position: absolute;
        top: 0;

        display: block;
        width: 100%;
    }
}

// Two mixins below are used to evenly space a single line of items across
//the full width of the parent.
// Both mixins should be used in conjunction.
@mixin justified_grid_parent {

    width: 100%;

    font-size: 0.1px;
    text-align: justify;

    &:after
    {
        content: '';
        display: inline-block;
        width: 100%;
        height: .01px;
    }
}

@mixin justified_grid_child($child_count: 3, $child_gutter: 1%) {

    display: inline-block;
    width: (100% / $child_count) - $child_gutter;

    text-align: left;
    vertical-align: top;
}

// The matrix grid evenly spaces out multiple rows of elements.
// It pads the bottom as well to be even with the horizontal spacing.
// CSS nth child selectors are used. May need to add some jQuery if it's not working in older browsers
@mixin matrix_grid($column_count: 2, $gutter: 1%) {

    $gutter_count: $column_count - 1;
    $total_gutter_widths: $gutter_count * $gutter;
    $total_column_widths: 100 - $total_gutter_widths;
    $column_width: $total_column_widths / $column_count;

    clear: none;
    float: left;

    margin-right: $gutter / 2; // help out IE8 so we don't need js.
    padding-bottom: $gutter;

    &:nth-child(1n) {

        float: left;
        clear: none;
        margin-right: $gutter;
    }

    width: $column_width;

    &:nth-child(#{$column_count}n + 1), &.child_#{$column_count}n_1 {

        clear: both;
        margin-left: 0;
    }

    &:nth-child(#{$column_count}n) {

        margin-right: 0;
    }
}